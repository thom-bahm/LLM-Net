from openai import OpenAI

class Agent:
    def __init__(self, prompt : str, identity: str, client: OpenAI):
        self.prompt = prompt
        self.identity = identity
        self.client = client
        self.model_name = "llama3.1-8b"
        self.backstory = self._create_backstory()
        self.system_prompt = {
                    "role": "system",
                    "content": f'''You are a hypothetical US citizen and voter.
                    This is your hypothetical Identity / Backstory (which is delimited by triple hashtags)
                    ###{self.backstory}###
                    Every response you give should be accurate to what a real person with your identity/backstory would say.
                    To be clear,
                    If you are currently a Trump supporter, you will be supportive of Trump proportional to your candidate favorability score and other characteristics provided by your backstory.
                    If you are currently a Kamala supporter, you will be supportive of Kamala proportional to your candidate favorability score and other characteristics provided by your backstory.
                    If you are Neutral, you may sway either towards Donald Trump, or Kamala Harris, or neither, depending on what news you are presented with. It should be possible for a Neutral voter
                    to become a Trump supporter with certain new information presented, just like they should be able to become a Harris supporter with other types of certain news presented.
                    '''
                }
        self.init_prompt = {
            "role": "user",
            "content": f"###{prompt}###. Share your thoughts and how this news will or will not affect if you will vote for the other Candidate (you must be picking between either Donald Trump, Kamala Harris, or Neutral). Keep your answer between 100-700 characters."
        }

        self.context = [self.system_prompt]
        
    def _create_backstory(self):
        response = self.client.chat.completions.create(
            messages = [{
            "role": "system",
            "content": '''You will be given a hypothetical identity. Develop an informational backstory (between 200-500 characters) to augment the identity you are given so it feels more like a real person. 
            The backstory should reflect all the traits mentioned by the provided identity, and mix this backstory with the identity provided. 
            Your output should be a mixture of objective information (such as the info provided in the identity you will be given) and details generated by the backstory you create.'''},
            {
                "role": "user",
                "content": self.identity
            }],
            model=self.model_name,
            stream=False
        )
        backstory = response.choices[0].message.content
        print('#\n'+backstory+'#\n')
        return backstory
        
    def chat(self, conversation_context: list):
        
        self.context = [self.system_prompt, self.init_prompt] + conversation_context
        
        response = self.client.chat.completions.create(
            messages=self.context,
            model=self.model_name,
            stream=False,
            temperature=0.6
        )
        agent_reply = response.choices[0].message.content
        return agent_reply
    
    def pre_predict(self):
        if "Kamala" in self.identity:
            return 0
        else:
            return 1

    def post_predict(self):
        messages = self.context + [{
                'role': 'user',
                'content': f'''
                Based off of who you are and the news mentioned to you,
                Respond '0' if you would vote for Kamala Harris, and '1' if you would vote for Donald Trump.
                Do not respond with any more than either 0 or 1. ONLY ONE OPTION ALLOWED.
                Check to make sure your answer is either '0' or '1'.
                '''
             }]
        response = self.client.chat.completions.create(
            messages=messages,
            model=self.model_name,
            stream=False,
            max_tokens=1
        )
        agent_reply = response.choices[0].message.content

        return agent_reply